# Define the trigger: runs on pushes to the 'main' branch
trigger:
- main

# Define variables used throughout the pipeline
variables:
  # General
  buildConfiguration: 'Release'
  
  # Docker / ACR
  # IMPORTANT: Change this to the name of your Azure Resource Manager service connection
  azureServiceConnection: 'Azure-Subscription' 
  # IMPORTANT: Change this to your Azure Container Registry name
  azureContainerRegistry: 'k8intelregistrynmac.azurecr.io'
  dockerRegistryServiceConnection: 'k8intelregistrynmac' 
  imageRepository: 'k8intel-api' 
  dockerfilePath: 'K8intel/Dockerfile'
  tag: '$(Build.BuildId)' # Use the unique build ID as the image tag
  
  # Kubernetes
  # IMPORTANT: Change this to the name of your Kubernetes service connection
  kubernetesServiceEndpoint: 'aks-dev-cluster' 
  k8sManifestPath: '$(Build.SourcesDirectory)/deploy/k8s-deployment.yml'


# Use a standard Microsoft-hosted agent for the jobs
pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build_and_Test
  displayName: 'Build & Test Stage'
  jobs:
  - job: Build
    displayName: 'Build and Test .NET Project'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore & Build'
      inputs:
        command: 'build'
        projects: 'K8intel/K8intel.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: 'K8Intel.Tests/K8Intel.Tests.csproj'
        arguments: '--no-build --configuration $(buildConfiguration)'
        publishTestResults: true

- stage: Build_and_Push_Image
  displayName: 'Build & Push Docker Image Stage'
  dependsOn: Build_and_Test 
  jobs:
  - job: PushImage
    displayName: 'Build and Push to ACR'
    steps:
    - task: Docker@2
      displayName: 'Login, Build and Push to ACR'
      inputs:
        command: 'buildAndPush'
        repository: '$(imageRepository)'
        dockerfile: '$(dockerfilePath)'
        # This references the ACR via your Azure service connection
        containerRegistry: '$(dockerRegistryServiceConnection)'
        tags: |
          $(tag)

- stage: Deploy_to_K8s
  displayName: 'Deploy to Kubernetes Stage'
  dependsOn: Build_and_Push_Image
  jobs:
  - job: Deploy
    displayName: 'Deploy to AKS'
    steps:
    # This is the modern, recommended task for deploying manifests to Kubernetes
    - task: KubernetesManifest@0
      displayName: 'Deploy API to Kubernetes cluster'
      inputs:
        action: 'deploy'
        # This references the Kubernetes service connection
        kubernetesServiceConnection: '$(kubernetesServiceEndpoint)'
        # Path to your manifest file
        manifests: '$(k8sManifestPath)'
        # This section performs the image substitution
        containers: |
          $(azureContainerRegistry)/$(imageRepository):$(tag)