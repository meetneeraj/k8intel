# Define the trigger: runs on pushes to the 'main' branch
trigger:
- main

# Define variables used throughout the pipeline
variables:
  # General
  buildConfiguration: 'Release'
  solution: '**/*.sln'
  project: 'K8intel/K8intel.csproj'
  
  # Docker / ACR
  # IMPORTANT: Change this to your Azure Container Registry name
  dockerRegistryServiceConnection: 'k8s-acr-connection'
  imageRepository: 'k8intel-api' 
  dockerfilePath: 'K8intel/Dockerfile'
  tag: '$(Build.BuildId)' # Use the unique build ID as the image tag

# Use a standard Microsoft-hosted agent for the jobs
pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build_and_Test
  displayName: 'Build & Test Stage'
  jobs:
  - job: Build
    displayName: 'Build and Test .NET Project'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore Dependencies'
      inputs:
        command: 'restore'
        projects: '$(solution)'

    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
        publishTestResults: true

    - task: DotNetCoreCLI@2
      displayName: 'Publish Artifact'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: false
        
    - task: PublishBuildArtifacts@1
      displayName: 'Upload Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'web'

- stage: Build_and_Push_Image
  displayName: 'Build & Push Docker Image Stage'
  dependsOn: Build_and_Test # This stage depends on the previous one
  jobs:
  - job: PushImage
    displayName: 'Build and Push to ACR'
    steps:
    - task: Docker@2
      displayName: 'Build and push image to ACR'
      inputs:
        command: 'buildAndPush'
        repository: '$(imageRepository)'
        dockerfile: '$(dockerfilePath)'
        # This references the service connection you created
        containerRegistry: '$(dockerRegistryServiceConnection)'
        tags: |
          $(tag)

- stage: Deploy_to_K8s
  displayName: 'Deploy to Kubernetes Stage'
  dependsOn: Build_and_Push_Image
  jobs:
  - job: Deploy
    displayName: 'Deploy to AKS'
    steps:
    - task: Kubernetes@1
      displayName: 'Deploy API to Kubernetes'
      inputs:
        # This references the Kubernetes service connection
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'aks-dev-cluster' 
        command: 'apply'
        useConfigurationFile: true
        # We assume your k8s manifest is in a 'deploy' folder
        configuration: 'deploy/k8s-deployment.yml'
        # This allows us to dynamically set the image tag in our manifest
        arguments: '--set image.tag=$(tag)'