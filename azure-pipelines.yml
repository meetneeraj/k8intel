# Define the trigger: runs on pushes to the 'main' branch
trigger:
- main

# Define variables used throughout the pipeline
variables:
  # General
  buildConfiguration: 'Release'
  
  # Docker / ACR
  azureServiceConnection: 'Azure-Subscription' 
  azureContainerRegistry: 'k8intelregistrynmac'
  dockerRegistryServiceConnection: 'k8intel-acr-connection' 
  imageRepository: 'k8intel-api' 
  dockerfilePath: 'K8intel/Dockerfile'
  tag: '$(Build.BuildId)' 
  
  # Kubernetes
  kubernetesServiceEndpoint: 'docker-desktop-k8s' 
  k8sManifestPath: '$(Build.SourcesDirectory)/deploy/k8s-deployment.yml'


# Use a standard Microsoft-hosted agent for the jobs
pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build_and_Test
  displayName: 'Build & Test Stage'
  jobs:
  - job: Build
    displayName: 'Build and Test .NET Project'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: 'restore'
        projects: '$(project)'

    - task: DotNetCoreCLI@2
      displayName: 'Build Project'
      inputs:
        command: 'build'
        projects: '$(project)'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--no-build --configuration $(buildConfiguration)'
        publishTestResults: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Upload Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'web'

- stage: Build_and_Push_Image
  displayName: 'Build & Push Docker Image Stage'
  dependsOn: Build_and_Test
  jobs:
  - job: PushImage
    displayName: 'Build and Push to ACR'
    steps:
    - task: Docker@2
      displayName: 'Build and push image to ACR'
      inputs:
        command: 'buildAndPush'
        # This MUST be the NAME of your Azure Container Registry, e.g., 'k8intelregistrynmac'
        repository: '$(imageRepository)'
        dockerfile: '$(dockerfilePath)'
        # This is the NAME of your service connection, e.g., 'k8intel-acr-connection'
        containerRegistry: '$(dockerRegistryServiceConnection)'
        tags: |
          $(tag)
          latest

- stage: Deploy_to_K8s
  displayName: 'Deploy to Kubernetes Stage'
  dependsOn: Build_and_Push_Image
  jobs:
  - job: Deploy
    displayName: 'Deploy to AKS'
    steps:
    # Use the simple task to set the image
    - task: Kubernetes@1
      displayName: 'Set image in Kubernetes'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'docker-desktop-k8s'
        command: 'set'
        arguments: 'image deployment/k8intel-api-deployment k8intel-api-container=$(acrHostname)/$(imageRepository):$(tag)'